# -*- coding: utf-8 -*-
"""restDatabase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O72tnWUxmwMrKx95pc46fR4R5n5bsxsj
"""
from flask import Flask
from flask_restful import Resource,Api,reqparse
import sqlite3

app = Flask(__name__)
api = Api(app)

#arguments required for get request to get a specific art info
getDataArgs = reqparse.RequestParser()
getDataArgs.add_argument("artistID",type=int,help="Artist ID",required=True)


#arguments required for put request to add data
addDataArgs = reqparse.RequestParser()
addDataArgs.add_argument("artistID",type=int,help="Artist ID",required=True)
addDataArgs.add_argument("firstName",type=str,help="Artist first name",required=True)
addDataArgs.add_argument("lastName",type=str,help="Artist last name",required=True)
addDataArgs.add_argument("artID",type=int,help="Art ID",required=True)
addDataArgs.add_argument("info",type=str,help="info about art piece",required=True)
addDataArgs.add_argument("image",help="info about art piece",required=True)


#arguments required for delete request to delete data
delDataArgs = reqparse.RequestParser()
delDataArgs.add_argument("artistID",type=int,help="Artist ID",required=True)

#arguments required for put request to update data
putDataArgs = reqparse.RequestParser()
putDataArgs.add_argument("artistID",type=int,help="Artist ID",required=True)
putDataArgs.add_argument("firstName",type=str,help="Artist first name",required=True)
putDataArgs.add_argument("lastName",type=str,help="Artist last name",required=True)
putDataArgs.add_argument("artID",type=int,help="Art ID",required=True)
putDataArgs.add_argument("info",type=str,help="info about art piece",required=True)
putDataArgs.add_argument("image",help="info about art piece",required=True)


#for showing all records
class dbmAll(Resource):
    def get(self):
        #create connection to database. Will be created if it doesnt exist
        conn = sqlite3.connect('artInfo.db')

        #create cursor instance
        c = conn.cursor()

        c.execute("SELECT artistID, firstName, lastName, artID, info, image FROM Art")
        a = c.fetchall()

        #save the changes
        conn.commit()
        #close the connection
        conn.close()

        return  {"All records":a}

#for add/update/delete/and view database records
class dbm(Resource):
    def get(self):
        args = getDataArgs.parse_args()
        #create connection to database. Will be created if it doesnt exist
        conn = sqlite3.connect('artInfo.db')

        #create cursor instance
        c = conn.cursor()

        c.execute("SELECT artistID, firstName, lastName, artID, info, image FROM Art")
        a = c.fetchone()

        #save the changes
        conn.commit()
        #close the connection
        conn.close()

        return  {"Found":a}

    def post(self):
        args = addDataArgs.parse_args()
        #create connection to database
        conn = sqlite3.connect('artInfo.db')

        #create cursor instance
        c = conn.cursor()

        c.execute("""INSERT INTO Art (artistID, firstName, lastName, artID, info, image)
                    VALUES(?,?,?,?,?,?)""",
                    (args["artistID"],args["firstName"],args["lastName"],args["artID"],args["info"],args["image"]))

        #save the changes
        conn.commit()
        #close the connection
        conn.close()

        return  {"Added":args}

    def put(self):
        args = putDataArgs.parse_args()

        conn = sqlite3.connect('artInfo.db')
        c = conn.cursor()

        c.execute("""UPDATE Art SET firstName=?, lastName=?, artID=?, info=?, image=? WHERE artistID=? """,
                   (args["firstName"],args["lastName"],args["artID"],args["info"],args["image"],args["artistID"]))


        conn.commit()
        conn.close()

        return  {"UPDATED":args}


    def delete(self):

        args = delDataArgs.parse_args()

        conn = sqlite3.connect('artInfo.db')
        c = conn.cursor()

        c.execute("DELETE FROM Art WHERE artistID=?", (args["artistID"],))

        conn.commit()
        conn.close()

        return  {"Deleted":args}



api.add_resource(dbm,'/')
api.add_resource(dbmAll,'/all')

if __name__ == '__main__':
    app.run(port=5000, debug=False, use_reloader=False)
